name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: terraform
    pool:
      name: myAgentPool
    steps:
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: 'latest'
    - task: TerraformCLI@0
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'myserviceconnection1'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'mystore1'
        backendAzureRmContainerName: 'mycontainer1'
        backendAzureRmKey: 'tf/terraform.tfstate'
    - task: TerraformCLI@0
      displayName: 'terraform plan '
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'myserviceconnection1'
        commandOptions: -out solution.plan
    - task: TerraformCLI@0
      displayName: 'terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'myserviceconnection1'

- stage: Build1
  displayName: fakerestapi
  jobs:
  - job: Build
    pool:
      name: myAgentPool
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      name: myAgentPool
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'myserviceconnection1'
              appName: 'myapplication1-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

- stage: UItest
  jobs:
  - job: Build
    pool:
      name: 'myAgentPool'
    steps:
    - task: ArchiveFiles@2
      displayName: 'selenium tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium-tests.zip'
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium-tests.zip'
      displayName: 'upload Selenium Tests'
      artifact: selenium

- stage: Deployment
  jobs:
    - deployment: UITests
      displayName: 'selenium UI test'
      pool:
        name: myAgentPool
      environment: 'Testing'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                displayName: 'download selenium'
              - task: Bash@3
                displayName: 'Install Selenium'
                inputs:
                  targetType: inline
                  script: |
                    sudo apt-get upgrade -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo apt-get -y install zip
                    sudo apt-get install -y chromium-browser
                    sudo apt-get install -y chromium-chromedriver
                    export PATH=$PATH:/usr/bin/chromium-browser
                    pip3 install selenium==3.14.1
                    export PATH=$PATH:/usr/bin/chromedriver
              - task: Bash@3
                displayName: 'Run Selenium tests'
                inputs:
                  targetType: inline
                  script: |
                    python3 $(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py

- stage: tests
  displayName: 'Postman_tests'
  jobs:
    - job: runPostmanTest
      pool:
        name: myAgentPool
      steps:
        - task: CmdLine@2
          displayName: Install newman
          inputs:
            script: |
              sudo apt update
              sudo apt-get update
              sudo apt-get dist-upgrade
              sudo apt install nodejs npm
              sudo npm install -g newman@4.0.0
              sudo npm install -g newman-reporter-junitfull
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        
        - task: CmdLine@2
          displayName: 'Run Regression Test Suite'
          continueOnError: true
          inputs:
            script: 'newman run automatedtesting/postman/Regression Tests.postman_collection.json -e automatedtesting/postman/DummyRestAPI Environment For Regression Testing.postman_environment.json --reporters cli,junit --reporter-junit-export Results\junitReport_regression.xml' 
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: CmdLine@2
          displayName: 'Data Validation Test Suite'
          inputs:
            script: 'newman run automatedtesting/postman/Data Validation Tests.postman_collection.json -e automatedtesting/postman/Sample Environment For Data Validation Testing.postman_environment.json --reporters cli,junit --reporter-junit-export Results\junitReport_datavalidation.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/*.xml'

  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


